function solveMDP(p::multiFareDynamicPricingProblem)

    # Initialize state = (ticketsAvailable, t)
    ticketsAvailable = p.totalTickets
    t = 1

    # Initialize Q
    ùñ≤ = p.totalTickets * p.timeHorizon
    ùñ† = prod([length(p.fareClasses[f].actionSpace) for f in keys(p.fareClasses)])
    Q = zeros(ùñ≤, ùñ†)

    # Initialize reward
    r = 0
    minTickets = 0
    minTime = 1

    s = LinearIndices((1:p.totalTickets, 1:p.timeHorizon))[ticketsAvailable - minTickets + 1, t - minTime + 1]
    œµ_gaussian = rand(Normal(p.œµ, 0), 1)[]
    a_index = rand(Bernoulli(œµ_gaussian), 1)[] == 1 ? rand(1:ùñ≤, 1) : argmax(Q[s, :])
    a = ### TO ADD ### get the triplet prices from the a_index

    # Loop along time

    while true

        ticketsSold‚Ä≤          = Dict(k => Set() for k in keys(p.fareClasses))
        customersWithPurchase = Dict(k => Set() for k in keys(p.fareClasses))

        for f in keys(p.fareClasses)
            _, ticketsSold‚Ä≤[f], _, customersWithPurchase[f] = generativeModel(problem, f, ticketsAvailable, t, a)
        end
        if sum([ticketsSold‚Ä≤[f] for f in keys(p.fareClasses)]) > ticketsAvailable
            ### TO ADD ### Filter customersWithPurchase so that its length is exactly equal to ticketsAvailable
            ### TO ADD ### Update ticketsSold‚Ä≤
        end

        #  Process purchases
        for f in keys(p.fareClasses)
            setdiff!(customersWithoutTickets[f], customersWithPurchase[f])
            union!(  customersWithTickets[f],    customersWithPurchase[f])
        end

        # Calculate new state and reward
        ticketsAvailable‚Ä≤ = ticketsAvailable - sum([ticketsSold‚Ä≤[f] for f in keys(p.fareClasses)])
        t‚Ä≤ = t + 1
        r = sum([a[f]*ticketsSold[f] for f in keys(p.fareClasses)])

        # Choose next action
        œµ_gaussian = rand(Normal(p.œµ, 0), 1)[]
        a‚Ä≤_index = rand(Bernoulli(œµ_gaussian), 1)[] == 1 ? rand(1:ùñ≤, 1) : argmax(Q[s, :])
        a‚Ä≤ = ### TO ADD ### get the triplet prices from the a‚Ä≤_index

        # Implement the Sarsa update step
        ### TO ADD ###

        # Update state and action
        ticketsAvailable = ticketsAvailable‚Ä≤
        t = t‚Ä≤
        a = a‚Ä≤

        if (t == p.timeHorizon) || (ticketsAvailable‚Ä≤ == 0)
            break
        end
    end

    # Extract policy
    œÄ‚ãÜ = argmax(Q, dims=2) # can replace with argmax(Q, dim=1), I think
    œÄ‚ãÜ = [œÄ‚ãÜ[s][2] for s in 1:ùñ≤]
end
