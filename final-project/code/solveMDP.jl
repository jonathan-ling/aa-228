function solveMDP(p::multiFareDynamicPricingProblem)

    # Initialize customer lists
    customersWithoutTickets = Dict(f => Set() for f in keys(fareClasses))
    customersWithTickets    = Dict(f => Set() for f in keys(fareClasses))

    # Initialize state = (ticketsAvailable, t)
    ticketsAvailable = p.totalTickets
    t = 1
    @show "Start", ticketsAvailable, t
    # Initialize state and action spaces

    ùñ≤_space = LinearIndices((0:p.totalTickets,1:p.timeHorizon))
    ùñ≤_size = length(ùñ≤_space)
    sCartesianIndex = CartesianIndex(findfirst(x->x==ticketsAvailable,0:p.totalTickets),findfirst(x->x==t,1:p.timeHorizon))
    sLinearIndex = LinearIndices(ùñ≤_space)[sCartesianIndex]

    ùñ†_space = LinearIndices(zeros([length(p.fareClasses[f].actionSpace) for f in keys(p.fareClasses)]...))

    # Initialize Q and r
    Q = zeros(ùñ≤_size, ùñ†_size)
    r = 0

    # Choose action
    a, aLinearIndex = chooseAction(p, Q, ùñ†_space, sLinearIndex)
    @show "Starting action", a, aLinearIndex
    # Loop in t

    for t = 1:p.timeHorizon
        @show "NEW LOOP------------------------------------------------------------", t
        ticketsSold‚Ä≤          = Dict(f => 0     for f in keys(p.fareClasses))
        customersWithPurchase = Dict(f => Set() for f in keys(p.fareClasses))
        newCustomers          = Dict(f => 0     for f in keys(p.fareClasses))

        for f in keys(p.fareClasses)
            _, ticketsSold‚Ä≤[f], _, newCustomers[f], customersWithoutTickets[f], customersWithPurchase[f] = generativeModel(problem, f, ticketsAvailable, t, a[f], customersWithoutTickets[f])
        @show "Ticket demand", ticketsSold‚Ä≤[f], newCustomers[f]
        end

        if sum([ticketsSold‚Ä≤[f] for f in keys(p.fareClasses)]) > ticketsAvailable
        @show "DEMAND > AVAILABILITY"
            # Filter customersWithPurchase so that its length is exactly equal to ticketsAvailable
            customersWithPurchaseAll = [(f,customer) for f in keys(p.fareClasses) for customer in customersWithPurchase[f]]
        @show "Demand count", length(customersWithPurchaseAll)
            customersWithPurchaseAll = shuffle(customersWithPurchaseAll)[1:ticketsAvailable]
            customersWithPurchase = Dict(f => Set([c[2] for c in filter(x->x[1]==f,customersWithPurchaseAll)]) for f in keys(p.fareClasses))
        @show "Tickets sold", length(customersWithPurchase[:mixed]), length(customersWithPurchase[:leisure]), length(customersWithPurchase[:business])
            #Update ticketsSold‚Ä≤
            ticketsSold‚Ä≤ = Dict(f => length(customersWithPurchase[f]) for f in keys(p.fareClasses))
        @show "Tickets sold dict", ticketsSold‚Ä≤
        end

        @show "Tickets sold", [length(customersWithPurchase[f]) for f in keys(p.fareClasses)]
        @show "Notix", [length(customersWithoutTickets[f]) for f in keys(p.fareClasses)]
        @show "Tix", [length(customersWithTickets[f]) for f in keys(p.fareClasses)]
        #  Process purchases
        for f in keys(p.fareClasses)
        @show "PROCESSING PURCHASES"
            setdiff!(customersWithoutTickets[f], customersWithPurchase[f])
            union!(  customersWithTickets[f],    customersWithPurchase[f])
        end
        @show "Notix", [length(customersWithoutTickets[f]) for f in keys(p.fareClasses)]
        @show "Tix", [length(customersWithTickets[f]) for f in keys(p.fareClasses)]

        # Calculate new state and reward
        ticketsAvailable‚Ä≤ = ticketsAvailable - sum([ticketsSold‚Ä≤[f] for f in keys(p.fareClasses)])
        t‚Ä≤ = t + 1
        r = sum([a[f]*ticketsSold‚Ä≤[f] for f in keys(p.fareClasses)])
        @show "New state and reward", ticketsAvailable‚Ä≤, t‚Ä≤, r

        # Choose next action
        sCartesianIndex‚Ä≤ = CartesianIndex(findfirst(x->x==ticketsAvailable‚Ä≤,0:p.totalTickets),findfirst(x->x==t‚Ä≤,1:p.timeHorizon))
        sLinearIndex‚Ä≤ = LinearIndices(ùñ≤_space)[sCartesianIndex‚Ä≤]
        a‚Ä≤, aLinearIndex‚Ä≤ = chooseAction(p, Q, ùñ†_space, sLinearIndex‚Ä≤)

        @show "new action", a‚Ä≤, aLinearIndex‚Ä≤

        # Implement the Sarsa update step
        @show "SARSA update"
        @show "Old value", Q[sLinearIndex,  aLinearIndex]
        Q[sLinearIndex,  aLinearIndex] += p.Œ∑*(r + p.Œ≥*Q[sLinearIndex‚Ä≤,  aLinearIndex‚Ä≤] - Q[sLinearIndex,  aLinearIndex])
        @show "Primed value", Q[sLinearIndex‚Ä≤,  aLinearIndex‚Ä≤]
        @show "New value", Q[sLinearIndex,  aLinearIndex]

        # Update state and action
        ticketsAvailable = ticketsAvailable‚Ä≤
        t = t‚Ä≤
        sLinearIndex = sLinearIndex‚Ä≤

        a = a‚Ä≤
        aLinearIndex,  aLinearIndex‚Ä≤

        @show "Tickets available", ticketsAvailable

        if ticketsAvailable <= 0
            break
        end
    end

    # Extract policy
    #œÄ‚ãÜ = argmax(Q, dims=2) # can replace with argmax(Q, dim=1), I think
    #œÄ‚ãÜ = [œÄ‚ãÜ[s][2] for s in 1:ùñ≤]
end
